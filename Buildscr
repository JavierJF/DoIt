# -*- sh -*-
# Build script for DoIt.

module doit

set Version $(!builddate).$(vcsid)

in doit do perl -i -pe 's/6.66/$(Version)/ if /AC_INIT/' configure.ac
in doit do ./mkauto.sh

# Substitute the right revision number in the README.
in doit do perl -i -pe 's/<<VER>>/$(Version)/' README

# Build the Windows binary.
ifneq "$(VISUAL_STUDIO)" "yes" then
  # Even in clang-cl cross-building mode, use a bob delegation (in
  # this case, just to self) to arrange that the intermediate build
  # products (.obj files etc) don't end up in the distribution archive
  # by mistake.
  delegate -
    in doit with clangcl64 do make -f Makefile.vc VER=/DVERSION=$(Version) CL_CMD='clang-cl --target=x86_64-pc-windows-msvc18.0.0' LINK_CMD=lld-link RC_CMD='x86_64-w64-mingw32-windres --preprocessor=clang-cl --preprocessor-arg=/TC --preprocessor-arg=/E -o $$@'
    # Code-sign this Windows binary, if the local bob config provides a
    # script to do so. We assume here that the script accepts an -i
    # option to provide a 'more info' URL, and that it signs the file in
    # place.
    ifneq "$(cross_winsigncode)" "" in doit do $(cross_winsigncode) -i https://www.chiark.greenend.org.uk/~sgtatham/doit/ doit.exe
    return doit/doit.exe
  enddelegate
else
  delegate windows
    in doit with visualstudio do/win nmake /f Makefile.vc VER=/DVERSION=$(Version)
    ifneq "$(winsigncode)" "" in doit do $(winsigncode) -i https://www.chiark.greenend.org.uk/~sgtatham/doit/ doit.exe
    return doit/doit.exe
  enddelegate
endif
in doit do chmod +x doit.exe

# Zip and tar up the source directory.
in doit do zip -9 ../doit.zip * -x Buildscr
in . do tar --exclude=Buildscr -chzf doit.tar.gz doit

# And deliver those archives, plus the text documentation for the web page.
deliver doit.zip $@
deliver doit.tar.gz $@
deliver doit/doitdoc.txt $@
